{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0ea8b51e-d122-4b88-bba2-04c5c97bd038",
   "metadata": {},
   "source": [
    "# Data Science Case Study: Candidate Resume Search Platform\n",
    "\n",
    "## Business Context & Objective\n",
    "\n",
    "### Background\n",
    "You are joining the Business Development team at Millennium which is a global hedge fund that manages assets across multiple investment strategies (fundamental equity, systematic trading, credit, etc.). The BD team is responsible for sourcing junior analyst talent across different:\n",
    "\n",
    "- **Geographic Markets**: US, Europe, Asia-Pacific\n",
    "- **Investment Approaches**: Fundamental vs. Systematic/Quantitative strategies\n",
    "- **Sectors**: Technology, Healthcare, Financial Services, Energy, Industrials, Consumer, Credit, Macro, etc.\n",
    "- **Experience Levels**: depending on the job requisitions\n",
    "\n",
    "### Goal\n",
    "Build a **searchable platform** to quickly identify candidates based on specific criteria based on job requisitions.\n",
    "\n",
    "### Your Task\n",
    "1. Parse resume data from PDF/Word documents using **LLM models via API**\n",
    "2. Create parsed resume data as **JSON, CSV, etc.** for further analysis\n",
    "3. Create a **Streamlit web application** where BD users can search and filter candidates using multiple criteria\n",
    "   (Based on the background provided above, you will come up with relevant filters)\n",
    "4. Visualize candidate distributions and insights\n",
    "5. **Design for scalability** to handle large volumes of resumes\n",
    "\n",
    "### Output\n",
    "1. Code for data parsing and Streamlit in **this Jupyter notebook** for ease of review\n",
    "2. Include the **link to Streamlit app** in the notebook\n",
    "3. **JSON/CSV exports** of parsed resume data\n",
    "4. Discussion of additional features and implementation approach if more time was available\n",
    "---\n",
    "\n",
    "## Sample Resume Data\n",
    "\n",
    "**You have access to 10 made up resume files representing different candidate profiles**\n",
    "\n",
    "---\n",
    "\n",
    "## Technical Requirements & Evaluation\n",
    "  \n",
    "### Evaluation Criteria\n",
    "1. **Technical Implementation (40%)**: Code quality, data processing, performance\n",
    "2. **User Experience (30%)**: Interface design, functionality, responsiveness\n",
    "3. **Business Value (20%)**: Feature completeness, search capabilities, insights\n",
    "4. **Documentation (10%)**: Code comments, README, presentation\n",
    "\n",
    "### Time Recommendation\n",
    "- **Total Estimated Time**: ~9 hours (**tight but achievable with focused approach**)\n",
    "- **Recommended Strategy**: Build core MVP in 6-7 hours, then enhance\n",
    "\n",
    "### Phased Approach (Recommended)\n",
    "**Phase 1 (3 hours): Core Parsing & Data**\n",
    "- Set up LLM API integration (OpenAI, Anthropic, or alternatives)\n",
    "- Parse 2-3 sample resumes using LLM\n",
    "- Create structured data format with JSON, etc.\n",
    "- Build basic data validation and quality checks\n",
    " \n",
    "**Phase 2 (3 hours): Streamlit**  \n",
    "- Basic filter interface\n",
    "- Simple results display\n",
    "- Core visualizations\n",
    "\n",
    "**Phase 3 (2-3 hours): Enhancement**\n",
    "- Parse remaining resumes\n",
    "- Add advanced filters\n",
    "- Polish UI/UX\n",
    "\n",
    "### Success Criteria (MVP)\n",
    "- LLM-powered parsing of at least 5-7 resume files with high accuracy\n",
    "- Working Streamlit app with basic search functionality\n",
    "- At least 3-4 meaningful filters working\n",
    "- A few visualizations showing candidate insights\n",
    "- JSON/CSV output of parsed resume data\n",
    "- Clean, documented code\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
